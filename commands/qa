#!/usr/bin/env ruby

require "redis"

class QA
  Blocked = Class.new(StandardError)

  def block
    redis.set "cbot:qa:blocked", "true"
  end
  alias_method :lock, :block

  def unblock
    redis.del "cbot:qa:blocked"
  end
  alias_method :unlock, :unblock

  def deploy(branch_name, &output)
    raise Blocked if blocked?

    sanitize! branch_name

    # Deploy and run tests concurrently
    run("./deploy cabify_server staging-us #{branch_name}", "VERBOSE=false ./rspec #{branch_name}", &output)
  end

  private

  def run(*commands, &output)
    Thread.abort_on_exception = true
    threads = commands.map do |command|
      Thread.new do
        IO.popen(command) do |f|
          until f.eof?
            s = f.gets
            output.call(s) if output
          end
        end
      end
    end
    threads.each { |t| t.join }
  end

  def sanitize!(branch_name)
    unless branch_name =~ /\A[-\w]+\z/
      raise "I wouldn't do that if I were you"
    end
  end

  def blocked?
    redis.get("cbot:qa:blocked") == "true"
  end

  def redis
    @redis ||= Redis.new
  end
end

$stdout.sync = true

branch_name = ARGV.first
qa = QA.new

case branch_name
when "block", "unblock", "lock", "unlock"
  qa.send(branch_name)
  puts "QA has been #{branch_name}ed"
when nil, ""
  puts "    Usage:"
  puts "      cbot qa [block|unblock]"
  puts "      cbot qa <branch_name>"
else
  begin
    qa.deploy(branch_name) { |s| puts s }
  rescue QA::Blocked
    puts "Cannot deploy to staging, it is blocked!"
  end
end
