#!/usr/bin/env ruby

require 'redis'

class Karma
  def initialize(nickname = nil)
    @nickname = nickname
  end

  def incr(by = 1)
    karma = redis.zincrby redis_key, by, normalized_nickname
    puts "    New karma for #{@nickname} is #{karma.to_i}"
  end

  def decr
    incr(-1)
  end

  def score
    karma = redis.zscore redis_key, normalized_nickname
    puts "    #{@nickname} has #{(karma || 0).to_i} points of karma"
  end

  def rank
    position = redis.zrank redis_key, normalized_nickname

    if position.nil?
      puts "    #{@nickname} is not in the list!"
      return
    end

    ord = case position.to_s
          when "11", "12", "13" then "th"
          when /1$/             then "st"
          when /2$/             then "nd"
          when /3$/             then "rd"
          else                       "th"
          end
    puts "    #{@nickname} is at #{(position || 0).to_i}#{ord} position"
  end

  def hof(start = 0, stop = 4)
    ranking = redis.zrevrange redis_key, start, stop, with_scores: true

    max_nickname_width = ranking.map { |x| x.first.length }.max
    max_score_width    = ranking.map { |x| x.last.to_i.to_s.length }.max

    ranking.each do |nickname, score|
      puts [
        "   ",
        nickname.ljust(max_nickname_width, "."),
        score.to_i.to_s.rjust(max_score_width, " ")
      ].join(" ")
    end
  end

  private

  def redis
    @redis ||= Redis.new
  end

  def redis_key
    "cbot:karma"
  end

  def normalized_nickname
    @nickname.downcase.sub(/^@/, "")
  end
end

cmd, nickname = ARGV
if %w[incr decr score rank].include?(cmd) && nickname && !nickname.empty?
  Karma.new(nickname).send(cmd)
elsif %w[hof].include?(cmd)
  Karma.new.send(cmd)
else
  puts "    Usage:"
  puts "      cbot karma [incr|decr|score|rank] <nickname>"
  puts "      cbot karma hof"
  exit
end
