#!/usr/bin/env bash
set -o errexit

if [ "$#" -ne 3 ]; then
  echo "Please provide <app> <environment> <branch>"
  exit 1
fi

# assign variables from args
app=$(./helpers/normalize-app-name $1)
appEnv=$2
branch=$3

logFile="/var/log/cbot/${app}_${appEnv}_${branch}.log"

# save all output to logfile
echo "################## $app $appEnv $branch" >> $logFile
date >> $logFile
echo "" >> $logFile

# assert there's an environment
if [ "$appEnv" == "" ]; then
  echo "Please provide an environment"
  exit 1
fi;

# assert environment is not production
if [ "$appEnv" == "production-us" ]; then
  echo "Whoooa! Cannot deploy to $appEnv... yet"
  exit 1
fi;

# cd into project
cd "/home/maxi/cbot/$app"

# Load RVM into a shell session *as a function*
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
  set +o errexit
  source "$HOME/.rvm/scripts/rvm"
  set -o errexit
else
  echo "ERROR: An RVM installation was not found"
  exit 1
fi

# assert that git is clean
dirty="$(git status --porcelain)"
if [ -n "$dirty" ]; then
  echo "Dirty git directory $(pwd):"
  echo $dirty
  exit 1
fi;

# assert that the branch exists
if ! git ls-remote --heads --exit-code origin $branch > /dev/null; then
  echo "Branch $branch not found"
  exit 1
fi;

echo "Starting deploy of $app to $appEnv on branch $branch" 
echo "" # required so that cbot sends previous message now and not at EOF

# fetch any new branches
git fetch --all --quiet
# switch to branch
git checkout $branch --quiet > /dev/null 2>&1
# update to state of remote branch
git reset --hard origin/$branch --quiet 

# install any dependencies
bundle check > /dev/null || bundle install > /dev/null

## deploy

# do not exit if deploy command fails
set +o errexit
# run cap, saving output to logfile
# return exit code of first command
# http://stackoverflow.com/questions/1221833/bash-pipe-output-and-capture-exit-status
startDeploy=$(date +%s)
deploy=$(bundle exec cap $appEnv deploy 2>&1 | tee -a $logFile; exit ${PIPESTATUS[0]})
deployStatus=$?
endDeploy=$(date +%s)

if [ $deployStatus -ne 0 ]; then
  echo "Error deploying, see $logFile"
  exit 1
fi;

deployTime=$((endDeploy-startDeploy))
echo "Deployed $app app to $appEnv on branch $branch in $deployTime s"
