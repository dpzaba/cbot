#!/usr/bin/env bash
#
# Run rspec tests on cabify_server. Will run on master branch unless branch given as 1st arg
#
# Usage: rspec [branch]
#
set -o errexit

# setup lockfile to avoid multiple rspecs running at once
lockFile=/tmp/rspec.lock
# quit if lockfile exits
if [ -f "$lockFile" ]; then
  echo "rspec is already running, try again later"
  exit 0
fi
# remove lockfile on exit
function cleanup {
  rm -f "$lockFile"
}
# remove lockFile on exit
trap cleanup EXIT
# create lockfile
date > $lockFile

# assign variables from args
app="cabify_server"
appDir=$(cd ../testables/${app}/; pwd)
branch=${1:-master}
# if verbose=false, will only output number of passed/failures
verbose=${VERBOSE:-true}

logFile="/var/log/cbot/${app}_rspec.log"

# print error (if given) then exit with error status
error ()
{
  if [ "$1" != "" ]; then
    printf "$1"
  fi;
  exit 1
}

# cd into project
cd $appDir

# Load RVM into a shell session *as a function*
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
  set +o errexit
  source "$HOME/.rvm/scripts/rvm"
  set -o errexit
else
  error "ERROR: An RVM installation was not found"
fi

# assert that the branch exists
if ! git ls-remote --heads --exit-code origin $branch > /dev/null; then
  error "Branch $branch not found"
fi;

# blank line required so that cbot sends previous message now and not at EOF
printf "Starting rspec of $app on branch $branch\n\n"
# write to logfile
echo "############### $(date) - Starting rspec of $app on branch $branch" >> $logFile

# fetch any new branches
git fetch --all --quiet
# switch to branch
git checkout $branch --quiet
# update to state of remote branch
git reset --hard origin/$branch --quiet

# install any dependencies
bundle check > /dev/null 2>&1 || bundle install > /dev/null 2>&1

# clobber assets. This is required for unknown reasons, if not performed
# generated sprites are not served correctly during the spec/requests tests...?
bundle exec rake assets:clobber > /dev/null 2>&1

## tmp rspec output file
tmpOutput=/tmp/cbot_rspec.out

# do not exit if rspec command fails
set +o errexit

# truncate tmp file
> $tmpOutput

# run rspec, saving output to logfile and temp file
# return exit code of first command
# http://stackoverflow.com/questions/1221833/bash-pipe-output-and-capture-exit-status
startTest=$(date +%s)
bundle exec rspec spec --format progress 2>&1 | tee -a $logFile $tmpOutput >/dev/null
testStatus=${PIPESTATUS[0]}
endTest=$(date +%s)

testTime=$((endTest-startTest))
output="${branch}: $(grep -E '[0-9]+ examples, [0-9]+ failures, [0-9]+ pending' $tmpOutput) in ${testTime}s"
if [ $testStatus -eq 0 ]; then
  echo ":+1: ${output}"
else
  echo ":-1: ${output}"
  if [ "$verbose" = true ]; then
    # send as separate message
    echo ""
    # output tmp file, removing blank lines so cbot only sends 1 message
    grep -e '^$' -v $tmpOutput
  fi
fi
